// Enhanced Prisma schema with Multi-Tenancy support
// This schema supports B2B/B2C multi-tenant architecture

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Multi-Tenancy Core Models
model Tenant {
  id            String    @id @default(cuid())
  name          String    @unique
  slug          String    @unique
  domain        String?   @unique
  logoUrl       String?
  settings      Json?
  planType      String    @default("free") // free, pro, enterprise
  status        String    @default("active") // active, suspended, cancelled
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  users         User[]
  organizations Organization[]
  projects      StagingProject[]
  subscriptions Subscription[]
  settings      TenantSetting[]
  usage         ResourceUsage[]
  
  @@map("tenants")
}

model Organization {
  id            String    @id @default(cuid())
  tenantId      String
  name          String
  settings      Json?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  tenant        Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  users         User[]
  projects      StagingProject[]
  
  @@map("organizations")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?
  emailVerified DateTime?
  image         String?
  tenantId      String
  organizationId String?
  role          String    @default("member") // owner, admin, member, viewer
  status        String    @default("active") // active, inactive, suspended
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // NextAuth.js fields
  accounts      Account[]
  sessions      Session[]
  
  // Relations
  tenant        Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  organization  Organization? @relation(fields: [organizationId], references: [id])
  projects      StagingProject[]
  subscriptions Subscription[]
  
  @@unique([email, tenantId])
  @@map("users")
}

model StagingProject {
  id           String   @id @default(cuid())
  originalUrl  String
  stagedUrl    String?
  style        String
  status       String   @default("pending") // pending, processing, completed, failed
  tenantId     String
  organizationId String?
  userId       String
  metadata     Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  tenant       Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  organization Organization? @relation(fields: [organizationId], references: [id])
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("staging_projects")
}

model TenantSetting {
  id           String   @id @default(cuid())
  tenantId     String
  settingKey   String
  settingValue String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  tenant       Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  @@unique([tenantId, settingKey])
  @@map("tenant_settings")
}

model ResourceUsage {
  id           String   @id @default(cuid())
  tenantId     String
  resourceType String   // staging, storage, api_calls
  amount       Int
  period       String   // daily, monthly
  metadata     Json?
  createdAt    DateTime @default(now())
  
  // Relations
  tenant       Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  @@map("resource_usage")
}

model Subscription {
  id              String    @id @default(cuid())
  userId          String
  tenantId        String
  plan            String    // free, pro, enterprise
  status          String    @default("active") // active, cancelled, expired
  currentPeriodEnd DateTime
  metadata        Json?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant          Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  @@map("subscriptions")
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}